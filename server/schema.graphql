# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumTaskStatus {
  Done
  New
  Ongoing
  Pending
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createNarachiCorporation(data: NarachiCorporationCreateInput!): NarachiCorporation!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  deleteNarachiCorporation(where: NarachiCorporationWhereUniqueInput!): NarachiCorporation!
  deleteTask(where: TaskWhereUniqueInput!): Task!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateNarachiCorporation(data: NarachiCorporationUpdateInput!, where: NarachiCorporationWhereUniqueInput!): NarachiCorporation!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type NarachiCorporation {
  Mining: String
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  id: String!
  owner: String
  startDate: DateTime
  updatedAt: DateTime!
}

input NarachiCorporationCreateInput {
  Mining: String
  description: String
  dueDate: DateTime
  owner: String
  startDate: DateTime
}

input NarachiCorporationOrderByInput {
  Mining: SortOrder
  createdAt: SortOrder
  description: SortOrder
  dueDate: SortOrder
  id: SortOrder
  owner: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input NarachiCorporationUpdateInput {
  Mining: String
  description: String
  dueDate: DateTime
  owner: String
  startDate: DateTime
}

input NarachiCorporationWhereInput {
  Mining: StringNullableFilter
  description: StringNullableFilter
  dueDate: DateTimeNullableFilter
  id: StringFilter
  owner: StringNullableFilter
  startDate: DateTimeNullableFilter
}

input NarachiCorporationWhereUniqueInput {
  id: String!
}

type Query {
  _narachiCorporationsMeta(orderBy: [NarachiCorporationOrderByInput!], skip: Float, take: Float, where: NarachiCorporationWhereInput): MetaQueryPayload!
  _tasksMeta(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  narachiCorporation(where: NarachiCorporationWhereUniqueInput!): NarachiCorporation
  narachiCorporations(orderBy: [NarachiCorporationOrderByInput!], skip: Float, take: Float, where: NarachiCorporationWhereInput): [NarachiCorporation!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(orderBy: [TaskOrderByInput!], skip: Float, take: Float, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Task {
  assignedTo: String
  createdAt: DateTime!
  estimation: String
  id: String!
  project: String
  startDate: DateTime
  status: EnumTaskStatus
  title: String
  updatedAt: DateTime!
}

input TaskCreateInput {
  assignedTo: String
  estimation: String
  project: String
  startDate: DateTime
  status: EnumTaskStatus
  title: String
}

input TaskOrderByInput {
  assignedTo: SortOrder
  createdAt: SortOrder
  estimation: SortOrder
  id: SortOrder
  project: SortOrder
  startDate: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input TaskUpdateInput {
  assignedTo: String
  estimation: String
  project: String
  startDate: DateTime
  status: EnumTaskStatus
  title: String
}

input TaskWhereInput {
  estimation: StringNullableFilter
  id: StringFilter
  startDate: DateTimeNullableFilter
  status: EnumTaskStatus
  title: StringNullableFilter
}

input TaskWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
